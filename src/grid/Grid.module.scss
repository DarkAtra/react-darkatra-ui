@import "src/styles/breakpoint";

// fallback for older browsers
.grid {
  max-width: 100%;
  margin: 0;
  padding: 0;

  // direct children are always grid items as specified by the specs
  > .grid-item {
    display: block;
    width: 100%;
    max-width: 100%;
    margin-bottom: 10px;
  }
}

@supports (grid-template-columns: 1fr) {
  .grid {
    display: grid;
    align-items: stretch;

    // direct children are always grid items as specified by the specs
    > .grid-item {
      display: flex;
      flex-direction: column;
      width: auto;
      margin-bottom: 0;

      // grid-row, grid-column with css variables for each breakpoint
      @each $prop, $abbrev in (grid-row: grid-row, grid-column: grid-column) {
        @include breakpoint-aware-css-variable($abbrev, auto);
        @each $breakpoint in map-keys($breakpoints) {
          $infix: breakpoint-infix($breakpoint);
          @include breakpoint-up($breakpoint) {
            &.#{$abbrev} {
              #{$prop}: span var(--#{$abbrev}#{$infix});
            }
          }
        }
      }

      // grid-order with css variables for each breakpoint
      @each $prop, $abbrev in (order: grid-order) {
        @include breakpoint-aware-css-variable($abbrev, 0);
        @each $breakpoint in map-keys($breakpoints) {
          $infix: breakpoint-infix($breakpoint);
          @include breakpoint-up($breakpoint) {
            &.#{$abbrev} {
              #{$prop}: var(--#{$abbrev}#{$infix});
            }
          }
        }
      }

      // grid-horizontal-alignment, grid-vertical-alignment with css variables for each breakpoint
      @each $prop, $abbrev in (align-items: grid-horizontal-alignment, justify-content: grid-vertical-alignment) {
        @include breakpoint-aware-css-variable($abbrev, normal);
        @each $breakpoint in map-keys($breakpoints) {
          $infix: breakpoint-infix($breakpoint);
          @include breakpoint-up($breakpoint) {
            &.#{$abbrev} {
              #{$prop}: var(--#{$abbrev}#{$infix});
            }
          }
        }
      }
    }

    // grid-inline with css variables for each breakpoint
    @each $prop, $abbrev in (display: grid-inline) {
      @include breakpoint-aware-css-variable($abbrev, grid);
      @each $breakpoint in map-keys($breakpoints) {
        $infix: breakpoint-infix($breakpoint);
        @include breakpoint-up($breakpoint) {
          &.#{$abbrev} {
            #{$prop}: var(--#{$abbrev}#{$infix});
          }
        }
      }
    }

    // grid-dense with css variables for each breakpoint
    @each $prop, $abbrev in (grid-auto-flow: grid-dense) {
      @include breakpoint-aware-css-variable($abbrev, row);
      @each $breakpoint in map-keys($breakpoints) {
        $infix: breakpoint-infix($breakpoint);
        @include breakpoint-up($breakpoint) {
          &.#{$abbrev} {
            #{$prop}: var(--#{$abbrev}#{$infix});
          }
        }
      }
    }

    // grid-gap with css variables for each breakpoint
    @each $prop, $abbrev in (grid-gap: grid-gap) {
      @include breakpoint-aware-css-variable($abbrev, 0);
      @each $breakpoint in map-keys($breakpoints) {
        $infix: breakpoint-infix($breakpoint);
        @include breakpoint-up($breakpoint) {
          &.#{$abbrev} {
            #{$prop}: var(--#{$abbrev}#{$infix});
          }
        }
      }
    }

    // grid-template-column with css variables for each breakpoint
    @each $prop, $abbrev in (grid-template-columns: grid-template-columns) {
      @include breakpoint-aware-css-variable($abbrev, none);
      @each $breakpoint in map-keys($breakpoints) {
        $infix: breakpoint-infix($breakpoint);
        @include breakpoint-up($breakpoint) {
          &.#{$abbrev} {
            #{$prop}: var(--#{$abbrev}#{$infix});
          }
        }
      }
    }
  }
}
